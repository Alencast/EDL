public class Main {
    public static void main(String[] args) {
        System.out.println("=== TESTES DO VETOR ===");

        // Teste 1: Inserção básica
        Vetor vetor = new Vetor(2);
        vetor.insertAtRank(0, 10);
        vetor.insertAtRank(1, 20);
        
        System.out.println("\nTeste 1 - Inserção básica:");
        System.out.println(vetor.elemAtRank(0).equals(10) ? "✅ elemAtRank(0) OK" : "❌ elemAtRank(0) Erro");
        System.out.println(vetor.elemAtRank(1).equals(20) ? "✅ elemAtRank(1) OK" : "❌ elemAtRank(1) Erro");

        // Teste 2: Redimensionamento automático
        vetor.insertAtRank(2, 30); // Deve redimensionar
        
        System.out.println("\nTeste 2 - Redimensionamento:");
        System.out.println(vetor.elemAtRank(2).equals(30) ? "✅ Redimensionamento OK" : "❌ Redimensionamento Erro");

        // Teste 3: Substituição de elemento
        Object old = vetor.replaceAtRank(1, 25);
        System.out.println("\nTeste 3 - Substituição:");
        System.out.println(old.equals(20) ? "✅ replaceAtRank() OK" : "❌ replaceAtRank() Erro");
        System.out.println(vetor.elemAtRank(1).equals(25) ? "✅ Novo valor OK" : "❌ Novo valor Erro");

        // Teste 4: Remoção
        Object removido = vetor.removeAtRank(0);
        System.out.println("\nTeste 4 - Remoção:");
        System.out.println(removido.equals(10) ? "✅ removeAtRank() OK" : "❌ removeAtRank() Erro");
        System.out.println(vetor.elemAtRank(0).equals(25) ? "✅ Elementos restantes OK" : "❌ Elementos restantes Erro");

        // Teste 5: Verificação de limites
        try {
            vetor.elemAtRank(99);
            System.out.println("\n❌ Falhou: deveria lançar exceção");
        } catch (IndexOutOfBoundsException e) {
            System.out.println("\n✅ Exceção de índice OK: " + e.getMessage());
        }

        System.out.println("\n=== TESTES CONCLUÍDOS ===");
    }
}

class Vetor {
  
    private Object[] a;
    private int tamanho;
    
    public Vetor(int capacidade){
        this.a = new Object[capacidade];
        this.tamanho = 0;
    }
    
    public boolean isFull(){
        return tamanho == a.length;
    }
    
    public boolean isEmpty(){
        return tamanho == 0;
    }
    
    public Object elemAtRank(int r){
        if(r < 0 || r >= tamanho){
            throw new IndexOutOfBoundsException("Index inválido");
        }
        return a[r];
    }
    
    public Object replaceAtRank(int r, Object o){
        if(r < 0 || r >= tamanho){
            throw new IndexOutOfBoundsException("Index inválido");
        }
        Object removed = a[r];
        a[r] = o;
        return removed;
    }
    
    public void insertAtRank(int r, Object o){
        if(r < 0 || r > tamanho){
            throw new IndexOutOfBoundsException("Index inválido");
        }
        
        if(isFull()){
            int novacap = a.length * 2;
            Object[] b = new Object[novacap];
            for(int i = 0; i < tamanho; i++){
                b[i] = a[i];
            }
            a = b;
        }
        
        for(int i = tamanho; i > r; i--){
            a[i] = a[i-1];
        }
        
        a[r] = o;
        tamanho++;
    }
    
    public Object removeAtRank(int r){
        if(r < 0 || r >= tamanho){
            throw new IndexOutOfBoundsException("Index inválido");
        }
        
        Object removed = a[r];
        
        for(int i = r; i < tamanho - 1; i++){
            a[i] = a[i+1];
        }
        
        a[tamanho - 1] = null;
        tamanho--;
        
        return removed;
    }
}
