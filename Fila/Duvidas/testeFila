// Arquivo Main.java - Vers√£o para compiladores online restritivos
public class Main {
    public static void main(String[] args) {
        System.out.println("üöÄ Testando implementa√ß√£o da Fila");
        
        // Criando uma fila com capacidade inicial 3
        Fila fila = new Fila(3);
        
        // Teste 1: Enfileirando elementos
        fila.enqueue("Primeiro");
        fila.enqueue("Segundo");
        fila.enqueue("Terceiro");
        System.out.println("‚úÖ Adicionados 3 elementos");
        
        // Teste 2: Desenfileirando (verificando ordem FIFO)
        System.out.println(fila.dequeue().equals("Primeiro") ? "‚úÖ Primeiro OK" : "‚ùå Erro no primeiro");
        System.out.println(fila.dequeue().equals("Segundo") ? "‚úÖ Segundo OK" : "‚ùå Erro no segundo");
        
        // Teste 3: Comportamento circular
        fila.enqueue("Quarto");
        System.out.println(fila.dequeue().equals("Terceiro") ? "‚úÖ Terceiro OK" : "‚ùå Erro no terceiro");
        System.out.println(fila.dequeue().equals("Quarto") ? "‚úÖ Quarto OK" : "‚ùå Erro no quarto");
        
        // Teste 4: Redimensionamento autom√°tico
        fila.enqueue(1);
        fila.enqueue(2);
        fila.enqueue(3);  // Deve redimensionar aqui (3 ‚Üí 6)
        fila.enqueue(4);
        System.out.println("‚úÖ Redimensionamento funcionou");
        
        // Teste 5: Fila vazia
        try {
            new Fila(1).dequeue();
            System.out.println("‚ùå Falhou: deveria lan√ßar exce√ß√£o");
        } catch (RuntimeException e) {
            System.out.println(e.getMessage().equals("Fila vazia") ? "‚úÖ Exce√ß√£o OK" : "‚ùå Mensagem errada");
        }
        
        System.out.println("üèÅ Todos os testes conclu√≠dos!");
    }
}

class Fila {
    private int capacidade;
    private int tamanho;
    private Object[] a;
    private int inicio;
    private int fim;
    
    public Fila(int capacidade) {
        this.capacidade = capacidade;
        this.tamanho = 0;
        this.a = new Object[capacidade];
        this.inicio = 0;
        this.fim = 0;
    }
    
    private boolean isFull() {
        return tamanho == capacidade;
    }
    
    private boolean isEmpty() {
        return tamanho == 0;
    }
    
    public void enqueue(Object o) {
        if(isFull()) {
            int novacap = capacidade * 2;
            Object[] b = new Object[novacap];
            
            for(int i = 0; i < tamanho; i++) {
                b[i] = a[(inicio + i) % capacidade];
            }
            
            a = b;
            capacidade = novacap;
            inicio = 0;
            fim = tamanho;
        }
        
        a[fim] = o;
        fim = (fim + 1) % capacidade;
        tamanho++;
    }
    
    public Object dequeue() {
        if(isEmpty()) {
            throw new RuntimeException("Fila vazia");
        }
        
        Object removed = a[inicio];
        a[inicio] = null;
        inicio = (inicio + 1) % capacidade;
        tamanho--;
        
        return removed;
    }
}
